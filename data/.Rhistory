ongoing_china <- general_samples_china_ongoing[[1]]
# store the weibul parameters
fitted_pars_china_ongoing <- general_samples_china_ongoing[[2]]
#caluclate the new quanitles
quantile(all_samples_general_china, probs=c(0.25,0.5,0.75))
general_hist_china <-hist(all_samples_general_china, breaks=40)
max(all_samples_general_china)
#caluclate the new quanitles
quantile(ongoing_china, probs=c(0.25,0.5,0.75))
general_hist_china <-hist(ongoing_china, breaks=40)
#printed values describe error in fit. Ideally less than 0.001
general_samples_china_complete <- create_dist_weibull_discrete(los_general_china_complete_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
# store the samples
complete_china <- general_samples_china_complete[[1]]
# store the weibul parameters
fitted_pars_china_complete <- general_samples_china_complete[[2]]
#caluclate the new quanitles
quantile(complete_china, probs=c(0.25,0.5,0.75))
general_hist_china <-hist(complete_china, breaks=40)
#printed values describe error in fit. Ideally less than 0.001
general_samples_china <- create_dist_weibull_discrete(los_general_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
# store the samples
all_samples_general_china <- general_samples_china[[1]]
# store the weibul parameters
fitted_pars_china <- general_samples_china[[2]]
gamma_errors_general_china <- general_samples_china[[3]]
#caluclate the new quanitles
quantile(all_samples_general_china, probs=c(0.25,0.5,0.75))
general_hist_china <-hist(all_samples_general_china, breaks=40)
general_samples_world <- create_dist_weibull_discrete(los_general_world_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
plot_hist_1 <- function(icu_china, icu_world, general_china, general_world){
icu_china <- data.frame(samples =icu_china, location = "China", type = "ICU")
icu_world <- data.frame(samples =icu_world, location = "Rest of World", type = "ICU")
general_china <- data.frame(samples =general_china, location = "China", type = "General")
general_world <- data.frame(samples =general_world, location = "Rest of World", type = "General")
all_samples <- rbind(icu_china, icu_world, general_china, general_world)
vline_data <- all_samples %>%
group_by(location,type) %>%
summarize(z=median(samples))
HIST_PLOT <- ggplot(all_samples, aes(x=samples)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts") #+
# geom_vline(aes(xintercept = z), vline_data, colour = "black", linetype= "dashed")
return(HIST_PLOT)
}
plot_hist_2 <- function(china_ongoing, china_complete){
china_ongoing <- data.frame(samples =icu_china, type = "Ongoing")
china_complete <- data.frame(samples =icu_world, type = "Complete")
all_samples <- rbind(china_ongoing, china_complete)
HIST_PLOT <- ggplot(all_samples, aes(x=samples)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts")
return(HIST_PLOT)
}
HIST_PLOT_2 <- plot_hist_2(china_ongoing = ongoing_china,
china_complete = complete_china)
plot_hist_2 <- function(china_ongoing, china_complete){
china_ongoing <- data.frame(samples =icu_china, type = "Ongoing")
china_complete <- data.frame(samples =icu_world, type = "Complete")
all_samples <- rbind(china_ongoing, china_complete)
HIST_PLOT <- ggplot(all_samples, aes(x=samples)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts")
return(HIST_PLOT)
}
plot_hist_2 <- function(china_ongoing, china_complete){
china_ongoing <- data.frame(samples =china_ongoing, type = "Ongoing")
china_complete <- data.frame(samples =china_complete, type = "Complete")
all_samples <- rbind(china_ongoing, china_complete)
HIST_PLOT <- ggplot(all_samples, aes(x=samples)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts")
return(HIST_PLOT)
}
HIST_PLOT_2 <- plot_hist_2(china_ongoing = ongoing_china,
china_complete = complete_china)
pdf("histograms.pdf")
HIST_PLOT
dev.off()
HIST_PLOT
pdf("histograms_complete.pdf")
HIST_PLOT_2
dev.off()
HIST_PLOT_2 <- plot_hist_2(china_ongoing = ongoing_china,
china_complete = complete_china)
pdf("histograms_complete.pdf")
HIST_PLOT_2
dev.off()
HIST_PLOT_2
plot_hist_2 <- function(china_ongoing, china_complete){
china_ongoing <- data.frame(samples =china_ongoing, type = "Ongoing")
china_complete <- data.frame(samples =china_complete, type = "Complete")
all_samples <- rbind(china_ongoing, china_complete)
HIST_PLOT <- ggplot(all_samples, aes(x=samples)) +
geom_histogram(bins=61)+
facet_grid(~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts")
return(HIST_PLOT)
}
HIST_PLOT_2 <- plot_hist_2(china_ongoing = ongoing_china,
china_complete = complete_china)
pdf("histograms_complete.pdf")
HIST_PLOT_2
dev.off()
HIST_PLOT_2
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
source('~/Documents/GitHub/los_review/code/comb_dists.R')
pdf("histograms_complete.pdf")
HIST_PLOT_2
dev.off()
pdf("histograms.pdf")
HIST_PLOT
dev.off()
quants_china_complete<- quantile(ongoing_complete,
probs=iqr)
quants_china_complete<- quantile(complete_china,
probs=iqr)
quants_china_complete
quants_china_ongoing
quants_china_ongoing<- quantile(ongoing_china,
probs=iqr)
quants_china_ongoing
quants_china_general
quants_china_general
quants_china_ongoing
quants_china_complete
dim(los_general_china_complete)
dim(los_general_china_ongoing)
dim(los_general_china)
los_general_china_complete
los_general_china_ongoing
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
#printed values describe error in fit. Ideally less than 0.001
general_samples_china <- create_dist_weibull_discrete(los_general_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
general_samples_world <- create_dist_weibull_discrete(los_general_world_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
#printed values describe error in fit. Ideally less than 0.001
colnames(los_icu_s) <- c("N", "LOS_med", "LOS_q25", "LOS_q75", "LOS_mean", "LOS_sd")
colnames(los_icu_china_s) <- c("N", "LOS_med", "LOS_q25", "LOS_q75", "LOS_mean", "LOS_sd")
colnames(los_icu_world_s) <- c("N", "LOS_med", "LOS_q25", "LOS_q75", "LOS_mean", "LOS_sd")
icu_samples_china <- create_dist_weibull_discrete(los_icu_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
icu_samples_world <- create_dist_weibull_discrete(los_icu_world_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
icu_samples_world
HIST_PLOT <- plot_hist_1(icu_china = all_samples_icu_china[["samples"]],
icu_world = all_samples_icu_world[["samples"]],
general_china = all_samples_general_china[["samples"]],
general_world = all_samples_general_world[["samples"]])
all_samples_icu_china$samples
all_samples_icu_china["samples"]
all_samples_icu_china
HIST_PLOT <- plot_hist_1(icu_china = all_samples_icu_china[["samples"]],
icu_world = all_samples_icu_world[["samples"]],
general_china = all_samples_general_china[["samples"]],
general_world = all_samples_general_world[["samples"]])
all_samples_icu_china[["samples"]]
all_samples_icu_china[[1]]
typeof(all_samples_icu_china)
class(all_samples_icu_china)
HIST_PLOT <- plot_hist_1(icu_china = icu_samples_china[["samples"]],
icu_world = icu_samples_world[["samples"]],
general_china = general_samples_china[["samples"]],
general_world = general_samples_world[["samples"]])
HIST_PLOT
los_general_china_complete
source('~/Documents/GitHub/los_review/code/comb_dists.R')
quants_china_ongoing<- quantile(ongoing_china,probs=iqr)
quants_china_ongoing
quants_china_complete
general_samples_china
quants_china_general
HIST_PLOT_2
general_samples_china_complete[["samples"]]
general_samples_china_complete[["samples"]] >60
count(general_samples_china_complete[["samples"]] >60)
length(general_samples_china_complete[["samples"]] >60)
general_samples_china_complete
general_samples_china_complete[["samples"]]
length(general_samples_china[["samples"]] > 60)
general_samples_china_complete[["samples"]] > 60
su(general_samples_china_complete[["samples"]] > 60)
sum(general_samples_china_complete[["samples"]] > 60)
sum(general_samples_china_complete[["samples"]] < 60)
china_ongoing_over_60 <- sum(general_samples_china_complete[["samples"]] > 60) /
length(general_samples_china_complete)
china_ongoing_over_60
length(general_samples_china_complete)
china_ongoing_over_60 <- sum(general_samples_china_complete[["samples"]] > 60) /
length(general_samples_china_complete[["samples"]])
china_ongoing_over_60
china_ongoing_over_60 <- sum(general_samples_china_complete[["samples"]] > 60) /
length(general_samples_china_complete[["samples"]])*100
china_ongoing_over_60
china_complete_over_60 <- sum(general_samples_china_complete[["samples"]] > 60) /
length(general_samples_china_complete[["samples"]])*100
china_ongoing_over_60 <- sum(general_samples_china_ongoing[["samples"]] > 60) /
length(general_samples_china_ongoing[["samples"]])*100
china_complete_over_60
china_ongoing_over_60
#quantiles
quants_china_general <- quantile(general_samples_china[["samples"]], probs=iqr)
quants_china_icu <- quantile(icu_samples_china[["samples"]], probs=iqr)
quants_world_general <- quantile(general_samples_world[["samples"]],  probs=iqr)
quants_world_icu <- quantile(icu_samples_world[["samples"]],probs=iqr)
quants_china_general
china_general_over_60 <- sum(general_samples_china[["samples"]] > 60) /
length(general_samples_china[["samples"]])*100
china_general_over_60 <- sum(general_samples_china[["samples"]] > 60) /
length(general_samples_china[["samples"]])*100
china_general_over_60 <- sum(general_samples_china[["samples"]] > 60) /
length(general_samples_china[["samples"]])*100
china_general_over_60
china_general_over_60 <- sum(general_samples_china[["samples"]] > 60) /
length(general_samples_china[["samples"]])*100
china_icu_over_60 <- sum(icu_samples_china[["samples"]] > 60) /
length(icu_samples_china[["samples"]])*100
china_general_over_60 <- sum(general_samples_china[["samples"]] > 60) /
length(general_samples_china[["samples"]])*100
china_icu_over_60 <- sum(icu_samples_china[["samples"]] > 60) /
length(icu_samples_china[["samples"]])*100
world_icu_over_60 <- sum(icu_samples_world[["samples"]] > 60) /
length(icu_samples_world[["samples"]])*100
world_general_over_60 <- sum(general_samples_world[["samples"]] > 60) /
length(general_samples_world[["samples"]])*100
#printed values describe error in fit. Ideally less than 0.001
general_samples_china_ongoing <- create_dist_weibull_discrete(los_general_china_ongoing_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
world_general_over_60
world_icu_over_60
china_icu_over_60
china_general_over_60
# interquatile range. Can change to something else but have to do equivalent in qunatiles
iqr <- c(0.25,0.5,0.75)
sample_size <- 100000
source('~/Documents/GitHub/los_review/code/comb_dists.R')
quants_china_general
quants_china_ongoing
quants_china_complete
unique(los_general_china$All.patients.discharged..dead.)
View(los_general_china_complete)
View(los_general_china)
View(los_general_china_complete)
dim(los_general_china)
#calculate the overall sample
create_dist_weibull_discrete <- function(quants, sizes, sample_size=10000, init_values){
# for subset that contains medians
quants_iqr <- quants[which(!is.na(quants$LOS_med)),]
quants_mean <- quants[which(is.na(quants$LOS_med)),]
# optimise the fit to dweibull for each input set
weibull_all <- apply(quants_iqr,1, function(x) optimise_quantiles(init_values = init_values,
dist_x = x))
# save the parameters and errors
weibull_pars <-   lapply(weibull_all, function(x) format_pars(x))
weibull_pars <- data.frame(matrix(unlist(weibull_pars), ncol=length(weibull_pars), byrow=F))
weibull_errors <- lapply(weibull_all, function(x) x[[2]])
weibull_errors <- unlist(weibull_errors)
# print the errors to alert the user if the errors are very big
browser()
if(dim(quants_mean)[1] >0){
# calculate the weibull paraamters from the mean and sds
weibull_means <- apply(quants_mean,1, function(x) weibull_mean(x))
#TODO add to the weibull_all list
all_dists <- cbind(weibull_means, weibull_pars) } else {
all_dists <- weibull_pars
rownames(all_dists) <- c("shape", "scale", "N")
}
#create discrete functions for each distribution
dis_weibulls <- lapply(all_dists, function(x) discrete_dist(x))
# calculate the propotional sample sizes
all_dists["prop_samples",] <- sapply(all_dists["N",], function(x) x/sum(all_dists["N",]))
# sample from multinomial to determine how many targets to include
all_dists["samples_taken",] <- rmultinom(n = 1, size = sample_size, prob = all_dists["prop_samples",])
# sample from the overall distributions
all_samples <- c()
for(i in 1:length(dis_weibulls)){
# get samples from the discrete weibull for each input set
subset_samples <- dis_weibulls[[i]]$r(n = all_dists["samples_taken",i])
all_samples <- c(all_samples, subset_samples)
}
return(list(samples = all_samples, parameters = weibull_pars, errors = weibull_errors))
}
#printed values describe error in fit. Ideally less than 0.001
general_samples_china_ongoing <- create_dist_weibull_discrete(los_general_china_ongoing_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
dim(quants_mean)[1]
weibull_pars
if(dim(quants_mean)[1] >0){
# calculate the weibull paraamters from the mean and sds
weibull_means <- apply(quants_mean,1, function(x) weibull_mean(x))
#TODO add to the weibull_all list
all_dists <- cbind(weibull_means, weibull_pars) } else {
all_dists <- weibull_pars
rownames(all_dists) <- c("shape", "scale", "N")
}
all_dists
all_dists
# calculate the weibull paraamters from the mean and sds
weibull_means <- apply(quants_mean,1, function(x) weibull_mean(x))
#TODO add to the weibull_all list
all_dists <- cbind(weibull_means, weibull_pars) } else {
all_dists <- cbind(weibull_means, weibull_pars) } else {
all_dists <- weibull_pars
rownames(all_dists) <- c("shape", "scale", "N")
all_dists
weibull_means
#TODO add to the weibull_all list
all_dists <- cbind(weibull_means, weibull_pars) } else {
all_dists <- cbind(weibull_means, weibull_pars) } else {
all_dists <- weibull_pars
rownames(all_dists) <- c("shape", "scale", "N")
all_dists
los_general_china_ongoing_s
los_general_china_complete_s
los_general_china_ongoing_s
los_general_china_complete <- los_general_china[which(los_general_china$All.patients.discharged..dead. == "Yes"),]
los_general_china_ongoing <- los_general_china[which(los_general_china$All.patients.discharged..dead. == "No"),]
los_general_china_complete_s <- los_general_china_complete[,general_parameters]
los_general_china_ongoing_s <- los_general_china[,general_parameters]
source('~/Documents/GitHub/los_review/code/comb_dists.R')
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
source('~/Documents/GitHub/los_review/code/comb_dists.R')
HIST_PLOT_2
HIST_PLOT
quants_china_ongoing
quants_china_ongoing <- quantile(ongoing_china, probs=iqr)
quants_china_complete <- quantile(complete_china, probs=iqr)
china_complete_over_60 <- sum(general_samples_china_complete[["samples"]] > 60) /
length(general_samples_china_complete[["samples"]])*100
china_ongoing_over_60 <- sum(general_samples_china_ongoing[["samples"]] > 60) /
length(general_samples_china_ongoing[["samples"]])*100
quants_china_ongoing
quants_china_complete
quants_china_complete <- quantile(general_samples_china_complete[["samples"]], probs=iqr)
quants_china_ongoing
quants_china_ongoing <- quantile(general_samples_china_ongoing[["samples"]], probs=iqr)
quants_china_complete <- quantile(general_samples_china_complete[["samples"]], probs=iqr)
quants_china_ongoing
quants_china_complete
HIST_PLOT_2
HIST_PLOT_2 <- plot_hist_2(china_ongoing = general_samples_china_ongoing[["samples"]],
china_complete = general_samples_china_complete[["samples"]])
pdf("histograms_complete.pdf")
HIST_PLOT_2
dev.off()
pdf("histograms.pdf")
HIST_PLOT
dev.off()
china_general_over_60
china_icu_over_60
world_icu_over_60
world_general_over_60
dim(sub_dat)
# calculate the difference between quantiles and gamma output for theta
min_quantiles <- function(theta, dist_x, iqr = c(0.25,0.5,0.75)){
#calculate quantiles with test parameters
test_quantiles <- pgamma(q = dist_x, shape = theta[1], scale = theta[2])
actual_quantiles <- iqr
# calculate difference between actualy quantiles and tested quantiles
diff_quantiles <- test_quantiles - actual_quantiles
# make it absolute
optim_value <- sum(diff_quantiles^2)
return(optim_value)
}
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
errors_gamma <-function(quants, sizes, sample_size=10000, init_values){
# for subset that contains medians
quants_iqr <- quants[which(!is.na(quants$LOS_med)),]
quants_mean <- quants[which(is.na(quants$LOS_med)),]
# optimise the fit to dweibull for each input set
gamma_all <- apply(quants_iqr,1, function(x) optimise_quantiles_gamma(init_values = init_values,
dist_x = x))
# save the parameters and errors
gamma_errors <- lapply(gamma_all, function(x) x[[2]])
gamma_errors <- unlist(gamma_errors)
return(gamma_errors)
}
# ###### FIT OVERALL DISTRIBUTION ####### - doesn't work, probably because of 0s
weibull_errors <- general_samples_china[["errors"]]
weibull_errors
gamma_errors <-  errors_gamma(los_general_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
gamma_errors
all_errors <- data.frame(errors = c(weibull_errors, gamma_errors),
type = c(rep("weibull", length(weibull_errors)),
rep("gamma", length(gamma_errors))))
HIST_PLOT <- ggplot(all_errors, aes(x=values)) +
geom_histogram(bins=33)+
facet_grid(~type) + theme_bw() #+
HIST_PLOT <- ggplot(all_errors, aes(x=values)) +
geom_histogram(bins=33)+
facet_grid(~type) + theme_bw() #+
ERROR_PLOT <- ggplot(all_errors, aes(x=values)) +
geom_histogram(bins=33)+
facet_grid(~type) + theme_bw() #+
ERROR_PLOT
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=33)+
facet_grid(~type) + theme_bw() #+
ERROR_PLOT
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=20)+
facet_grid(~type) + theme_bw() #+
ERROR_PLOT
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=25)+
facet_grid(~type) + theme_bw() #+
ERROR_PLOT
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=15)
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=15) +
facet_grid(~type) + theme_bw() #+
ERROR_PLOT
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=10) +
facet_grid(~type) + theme_bw() #+
# labs(x ="Length of Stay (days)", y="Counts") #+
# geom_vline(aes(xintercept = z), vline_data, colour = "black", linetype= "dashed")
sum(gamma_errors_general_china)
ERROR_PLOT
# labs(x ="Length of Stay (days)", y="Counts") #+
# geom_vline(aes(xintercept = z), vline_data, colour = "black", linetype= "dashed")
sum(gamma_errors_general_china)
sum(weibull_errors_general_china)
# save error plot
pdf("error_plot.pdf")
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=10) +
facet_grid(~type) + theme_bw() #+
# save error plot
pdf("error_plot.pdf")
ERROR_PLOT <- ggplot(all_errors, aes(x=errors)) +
geom_histogram(bins=10) +
facet_grid(~type) + theme_bw()
dev.off()
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
#printed values describe error in fit. Ideally less than 0.001
general_samples_china_2 <- create_dist_weibull_discrete(los_general_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27))
#printed values describe error in fit. Ideally less than 0.001
general_samples_china_2 <- create_dist_weibull_discrete(los_general_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27),
weighting = F)
all_dists
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
#printed values describe error in fit. Ideally less than 0.001
general_samples_china_2 <- create_dist_weibull_discrete(los_general_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27),
weighting = F)
general_samples_world_2 <- create_dist_weibull_discrete(los_general_world_s,
sizes,
sample_size = sample_size,
init_values = c(3,27),
weighting = F)
icu_samples_china_2 <- create_dist_weibull_discrete(los_icu_china_s,
sizes,
sample_size = sample_size,
init_values = c(3,27),
weighting = F)
icu_samples_world_2 <- create_dist_weibull_discrete(los_icu_world_s,
sizes,
sample_size = sample_size,
init_values = c(3,27),
weighting = F)
HIST_PLOT_NoWeight <- plot_hist_1(icu_china = icu_samples_china_2[["samples"]],
icu_world = icu_samples_world_2[["samples"]],
general_china = general_samples_china_2[["samples"]],
general_world = general_samples_world_2[["samples"]])
HIST_PLOT_NoWeight
pdf("histograms_no_weight.pdf")
HIST_PLOT_NoWeight
dev.off()
