# read in the webpage
if(has_error(webpage<-read_html(url), silent = T)){
message("cannot access quote of the day - check internet connection")
} else {
webpage <- read_html(url)
q_of_d_html <- html_nodes(webpage,'.oncl_q')[2]
q_of_d <- html_text(q_of_d_html)
message(paste0("Quote of the day: ", q_of_d))}
close(webpage)
source('~/.Rprofile', echo=TRUE)
suppressWarnings(closeAllConnections())
rm(url)
source('~/.Rprofile', echo=TRUE)
file.edit("~/.Rprofile")
file.edit("~/.Rprofile")
source('~/Documents/GitHub/HE_practical/HE_practical_functions.R')
# Parameters for the model
parameters_novacc <- list(
time_step = 0.2,  # time step in days
transmission_c = 0.55, # transmission coefficient child to child
rate_recov = 1/3, # rate of recovery from infection
mixing_mat = matrix(data = c(1, 0.15, 0.15, 0.8), # relative mixing values
ncol = 2,
dimnames = list(c("child", "adult"),c("child", "adult"))),
p_immune_c = 0.25, p_immune_a = 0.4,  # proportion immune children/adults
p_vacc_c = 0, p_vacc_a = 0, # proportion vaccinated at start - children/adults
vacc_eff_c = 0.4, vacc_eff_a = 0.4, # vaccine efficacy against infection - children/adults
p_clinical_c = 0.4, p_clinical_a = 0.4, # proportion infections clincal - children/adults
cfr_c = 0.0001, cfr_a = 0.0002, # case fatality risk (proportion) - children/adults
N_c = 10000, N_a = 40000  # Total number of children/adults
)
# rate of recovery from infection (1/timestep)
parameters_novacc[["eff_rate_recov"]] <- parameters_novacc[["rate_recov"]] *
parameters_novacc[["time_step"]]
# Effective contact rate between any two individuals per time step ("WAIF" matirx)
parameters_novacc[["eff_contact_rate"]] <- calc_contact_rates(parameters_novacc)
# calculate the inital states
init_states_novacc = calc_init_states(parameters_novacc, I_c=5, I_a=5) # I_c /a initial infected children/adults
# times for which to runs the model
times = seq(from = 0, to = 200, by = 0.2)
# Calculate the outputs for the scenario with no vaccination
output_novacc <- sir_model(times, init_states_novacc, parameters_novacc) # outputs each state at each timepoint
total_nums_novacc <- calc_tots(output_novacc) # calculates total numbers of cases and deats
summary_plot_novacc <- prevalent_infection_plot(output_novacc) # plots the prevalence
# Parameters for the model
parameters_vacc_A <- list(
time_step = 0.2,  # time step in days
transmission_c = 0.55, # transmission coefficient child to child
rate_recov = 1/3, # rate of recovery from infection
mixing_mat = matrix(data = c(1, 0.15, 0.15, 0.8), # relative mixing values
ncol = 2,
dimnames = list(c("child", "adult"),c("child", "adult"))),
p_immune_c = 0.25, p_immune_a = 0.4,  # proportion immune children/adults
p_vacc_c = 0.5, p_vacc_a = 0, # proportion vaccinated at start - children/adults
vacc_eff_c = 0.4, vacc_eff_a = 0.4, # vaccine efficacy against infection - children/adults
p_clinical_c = 0.4, p_clinical_a = 0.4, # proportion infections clincal - children/adults
cfr_c = 0.0001, cfr_a = 0.0002, # case fatality risk (proportion) - children/adults
N_c = 10000, N_a = 40000  # Total number of children/adults
)
source('~/Documents/GitHub/HE_practical/HE_practical_functions.R')
# Parameters for the model
parameters_novacc <- list(
time_step = 0.2,  # time step in days
transmission_c = 0.55, # transmission coefficient child to child
rate_recov = 1/3, # rate of recovery from infection
mixing_mat = matrix(data = c(1, 0.15, 0.15, 0.8), # relative mixing values
ncol = 2,
dimnames = list(c("child", "adult"),c("child", "adult"))),
p_immune_c = 0.25, p_immune_a = 0.4,  # proportion immune children/adults
p_vacc_c = 0, p_vacc_a = 0, # proportion vaccinated at start - children/adults
vacc_eff_c = 0.4, vacc_eff_a = 0.4, # vaccine efficacy against infection - children/adults
p_clinical_c = 0.4, p_clinical_a = 0.4, # proportion infections clincal - children/adults
cfr_c = 0.0001, cfr_a = 0.0002, # case fatality risk (proportion) - children/adults
N_c = 10000, N_a = 40000  # Total number of children/adults
)
# rate of recovery from infection (1/timestep)
parameters_novacc[["eff_rate_recov"]] <- parameters_novacc[["rate_recov"]] *
parameters_novacc[["time_step"]]
# Effective contact rate between any two individuals per time step ("WAIF" matirx)
parameters_novacc[["eff_contact_rate"]] <- calc_contact_rates(parameters_novacc)
# calculate the inital states
init_states_novacc = calc_init_states(parameters_novacc, I_c=5, I_a=5) # I_c /a initial infected children/adults
# times for which to runs the model
times = seq(from = 0, to = 200, by = 0.2)
# Calculate the outputs for the scenario with no vaccination
output_novacc <- sir_model(times, init_states_novacc, parameters_novacc) # outputs each state at each timepoint
total_nums_novacc <- calc_tots(output_novacc) # calculates total numbers of cases and deats
summary_plot_novacc <- prevalent_infection_plot(output_novacc) # plots the prevalence
# Parameters for the model
parameters_vacc_A <- list(
time_step = 0.2,  # time step in days
transmission_c = 0.55, # transmission coefficient child to child
rate_recov = 1/3, # rate of recovery from infection
mixing_mat = matrix(data = c(1, 0.15, 0.15, 0.8), # relative mixing values
ncol = 2,
dimnames = list(c("child", "adult"),c("child", "adult"))),
p_immune_c = 0.25, p_immune_a = 0.4,  # proportion immune children/adults
p_vacc_c = 0.5, p_vacc_a = 0, # proportion vaccinated at start - children/adults
vacc_eff_c = 0.4, vacc_eff_a = 0.4, # vaccine efficacy against infection - children/adults
p_clinical_c = 0.4, p_clinical_a = 0.4, # proportion infections clincal - children/adults
cfr_c = 0.0001, cfr_a = 0.0002, # case fatality risk (proportion) - children/adults
N_c = 10000, N_a = 40000  # Total number of children/adults
)
output_vacc_A <- recalibrate_sir_model(parameters_vacc_A)# outputs each state at each timepoint
total_nums_vacc_A <- calc_tots(output_vacc_A) # calculates total numbers of cases and deats
summary_plot_vacc_A <- prevalent_infection_plot(output_vacc_A) #plots the prevalence
# Parameters for the model
parameters_vacc_B <- list(
time_step = 0.2,  # time step in days
transmission_c = 0.55, # transmission coefficient child to child
rate_recov = 1/3, # rate of recovery from infection
mixing_mat = matrix(data = c(1, 0.15, 0.15, 0.8), # relative mixing values
ncol = 2,
dimnames = list(c("child", "adult"),c("child", "adult"))),
p_immune_c = 0.25, p_immune_a = 0.4,  # proportion immune children/adults
p_vacc_c = 0.25, p_vacc_a = 0.25, # proportion vaccinated at start - children/adults
vacc_eff_c = 0.4, vacc_eff_a = 0.4, # vaccine efficacy against infection - children/adults
p_clinical_c = 0.4, p_clinical_a = 0.4, # proportion infections clincal - children/adults
cfr_c = 0.0001, cfr_a = 0.0002, # case fatality risk (proportion) - children/adults
N_c = 10000, N_a = 40000  # Total number of children/adults
)
output_vacc_B <- recalibrate_sir_model(parameters_vacc_B)# outputs each state at each timepoint
total_nums_vacc_B <- calc_tots(output_vacc_B) # calculates total numbers of cases and deats
summary_plot_vacc_B <- prevalent_infection_plot(output_vacc_B) #plots the prevalenc
#Inputs new
econ <- c(
cost_vacc = 8, # Cost per fully vaccinated person (Â£)
cost_clinical = 12, # Cost per clinical case (Â£)
qaly_clinical = 0.005, # QALY loss per clinical case
qaly_death = 30 # QALY loss per death
)
# inputs from earlier modelling
total_nums_novacc # total numbers in non-vaccination scenario
total_nums_vacc_A # total numbers in vaccination scenario A
total_nums_vacc_B # total numbers in vaccination scenario B
#create summary table
totals_summary <- data.frame(row.names = c("clinical_cases",
"deaths",
"number_vaccinated",
"vaccine_costs",
"treatment_costs",
"total_costs",
"qalys_lost_clinical",
"qalys_lost_deaths",
"total_qalys"))
# calculate sumary for each vaccine group
totals_summary[,"no_vacc"] <- calc_cost_summary(total_nums_novacc,
parameters_novacc, econ, all_values = T)
totals_summary[,"vacc_A"] <- calc_cost_summary(total_nums_vacc_A,
parameters_vacc_A, econ,all_values = T)
totals_summary[,"vacc_B"] <- calc_cost_summary(total_nums_vacc_B,
parameters_vacc_B, econ, all_values = T)
totals_summary
# calculate the differences between the vaccination strategies
differences <- data.frame(row.names = c("clinical_cases",
"deaths",
"number_vaccinated",
"vaccine_costs",
"treatment_costs",
"total_costs",
"qalys_lost_clinical",
"qalys_lost_deaths",
"total_qalys"))
differences[,"No_vacc to A"] <- totals_summary[,"no_vacc"] - totals_summary[,"vacc_A"]
differences[,"No_vacc to B"] <- totals_summary[,"no_vacc"] - totals_summary[,"vacc_B"]
differences[,"B to A"] <- totals_summary[,"vacc_B"] - totals_summary[,"vacc_A"]
differences["Inc_per_clinical",] <- differences["total_costs",] / differences["clinical_cases",]
differences["Inc_per_death",] <- differences["total_costs", ] / differences["deaths",]
differences["Inc_per_qaly",] <- differences["total_costs", ] / differences["total_qalys",]
#plot the cost-effectiveness plane
cost_eff_plane <- plot_cost_eff(differences)
cost_eff_plane
# matrix for holding ranges for PSA
psa_ranges <- matrix(nrow=3, ncol=4,
dimnames = list(c("Mean", "Min", "Max"),
c("cost_vacc", "cost_clinical","qaly_clinical","qaly_death")))
# specify ranges
psa_ranges["Mean",] <- econ
psa_ranges["Min",] <- c(4, 6, 0.0025, 20)
psa_ranges["Max",] <- c(12,18,0.0075, 40)
# create table to store simulation inputs and outputs
psa_table <- matrix(ncol=12, nrow=100, dimnames = list(c(1:100),
c("scenario", "cost_vacc",
"cost_clinical","qaly_clinical",
"qaly_death", "No_Vacc_qaly_lost",
"No_Vacc_cost",
"A_qaly_lost","A_cost",
"qaly_gain","net_cost",
"cost_qaly")))
# take random uniform sample for each input parameter from ranges
psa_table[,"scenario"]<- c(1:100)
psa_table[,"cost_vacc"] <- psa_ranges["Min", "cost_vacc"] +
runif(n=100)*(psa_ranges["Max", "cost_vacc"]-psa_ranges["Min", "cost_vacc"])
psa_table[,"cost_clinical"] <- psa_ranges["Min", "cost_clinical"] +
runif(n=100)*(psa_ranges["Max", "cost_clinical"]-psa_ranges["Min", "cost_clinical"])
psa_table[,"qaly_clinical"] <- psa_ranges["Min", "qaly_clinical"] +
runif(n=100)*(psa_ranges["Max", "qaly_clinical"]-psa_ranges["Min", "qaly_clinical"])
psa_table[,"qaly_death"] <- psa_ranges["Min", "qaly_death"] +
runif(n=100)*(psa_ranges["Max", "qaly_death"]-psa_ranges["Min", "qaly_death"])
#calculate the QALYs lost and total costs for no vaccine and vaccine scenario A strategies
for(i in 1:dim(psa_table)[1]){
psa_table[i,c("No_Vacc_qaly_lost","No_Vacc_cost")] <-
calc_cost_summary(total_nums_novacc, parameters_novacc, psa_table[i,], all_values=F)
psa_table[i,c("A_qaly_lost","A_cost")] <-
calc_cost_summary(total_nums_vacc_A, parameters_vacc_A, psa_table[i,], all_values=F)
}
# calculate the difference in QALYs and costs, and work out the ratio
psa_table[,"qaly_gain"] <- psa_table[,"A_qaly_lost"] - psa_table[,"No_Vacc_qaly_lost"]
psa_table[,"net_cost"] <- psa_table[,"A_cost"] - psa_table[,"No_Vacc_cost"]
psa_table[,"cost_qaly"] <- psa_table[,"net_cost"] / psa_table[,"qaly_gain"]
# work out summary of the overall values
summary_cost_qaly<-quantile(psa_table[,"cost_qaly"], probs=c(0.05, 0.5, 0.95))
#plot the cost effectiveness plane for the differences in cost
plot_inc_cost_eff(psa_table)
# Set the working directory to the one which contains the data
setwd("C:\\Data\\Samelfs\\Data summaries")
install.packages("rio")
create_file_names <- function(todays_folder, data_folder){
#  Create a new folder for the ammended data
# If 'Cleaned' folder doesn't exist, create it - amended files are stored here
main_dir  = paste0(data_folder ,"/", todays_folder)
sub_dir =  "Cleaned"
ifelse(!dir.exists(file.path(main_dir, sub_dir)),
dir.create(file.path(main_dir, sub_dir)), FALSE)
# What is psu? and vil? vil maybe village...
psu_details <-  paste0(data_folder, "/","PSU_details.csv")
# files to store summary output
data_summary_outfile <- paste0(data_folder, "/" ,todays_folder,"/" ,
todays_folder ,"_Extended_Summary.xlsx")
weekly_summary_outfile_std <- paste0(data_folder, "/", todays_folder, "/",
todays_folder, "_MOH_Summary.csv")
weekly_summary_outfile_ext <- paste0(data_folder, "/" ,todays_folder,"/" ,
todays_folder ,"_MOH_Summary_intensive.csv")
psu_summary_report <- paste0(data_folder,"/", todays_folder, "/", todays_folder,"_CI_Summary_Report_PSU.csv" )
vil_summary_report <- paste0(data_folder,"/", todays_folder, "/", todays_folder,"_CI_Summary_Report_VIL.csv" )
# File names to be checked - exclude .csv extention
# TODO - this will need altering when know the names of the output files from Kobo.
convinience_file = "1-convenience-survey-of-children-v1-survey-export"
exam_file = "3-lymphoedema-and-scabies-examination-v3-survey-export"
lab_file = "4-initial-laboratory-results-v1-survey-export"
pos_file = "5-additional-lab-results-on-fts-positive-persons-v1-survey-export"
hh_file = "2-household-enrollment-v4-e93065d8-022f-4b8a-89df-1591a8ff4a81-survey-export"
# Generate remaining full file paths.
hh_file_path <- paste0(data_folder, "/",todays_folder,"/",hh_file,".xlsx")
convenience_file_path <- paste(data_folder, "/",todays_folder,"//",convinience_file,".xlsx")
exam_file_path <- paste(data_folder, "/",todays_folder,"//",exam_file,".xlsx" )
lab_file_path  <- paste(data_folder, "/",todays_folder,"//",lab_file,".xlsx")
pos_file_path <- paste(data_folder, "/",todays_folder,"//",pos_file,".xlsx")
return(list(hh_file_path = hh_file_path, convenience_file_path = convenience_file_path,
exam_file_path = exam_file_path, lab_file_path = lab_file_path,
pos_file_path = pos_file_path))
}
#change the folder date each day e.g. TODAYSFOLDER e.g "13_10_18"
todays_folder = folder
folder = "tester_f"
#change the folder date each day e.g. TODAYSFOLDER e.g "13_10_18"
todays_folder = folder
data_folder = "~/Documents/Data/DR/Data_summaries"
amended_folder = paste0(todays_folder,"/Cleaned")
# create file paths for each thing
file_path_list <- create_file_names(todays_folder, data_folder)
file_path_list
# create file paths for each thing
file_path_list <- create_file_names(todays_folder, data_folder)
file_path_list
amended_folder = paste0(todays_folder,"/Cleaned")
source('~/Desktop/Data_checks_functions_2.R')
# create file paths for each thing
file_path_list <- create_file_names(todays_folder, data_folder, amended_folder)
file_path_list
r
r
library("rio")
library("dplyr")
file_path_list
library(sf)
vignette(pacckage="sf")
vignette(package = "sf")
vignette("sf1")
world
library(raster)
library(spDara)
library(spData)
install.packages("spData")
install.packages("spDataLarge")
library(spData)
library(spDataLarge)
install.packages("spDataLarge")
library(spDataLarge)
names(world)
world$geom
plot(world)
summary(world)
summary(world$lifeExp)
summary(world["lifeExp"])
# can convert to sp formats and back in case what to use older packages
world_sp = as(world, Class = "Spatial")
world_sf = st_as_sf(world_sp)
plot(world[3:6])
plot(world["pop"])
world_asia = world[world$continent == "Asia",]
asia = st_union(world_asia)
plot(world["pop"], reset=FALSE)
plot(asia, add=TRUE, col="Red")
plot(world["pop"], reset=FALSE)
plot(asia, add=TRUE, col="Red")
plot(world["continent"], reset=F)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = T)
plot(st_geometry(world_cents), add = T, cex = cex)
india = world[world$name_long == "India"]
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0,0.2,0.1,1), col="gray", lwd)
plot(world_asia[0], add=T)
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0,0.2,0.1,1), col="gray")
plot(world_asia[0], add=T)
dev.off()
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0,0.2,0.1,1), col="gray")
plot(world_asia[0], add=T)
plot(st_geometry(india), expandBB = c(0,0.2,0.1,1), col="gray", lwd=3)
plot(world_asia[0], add=T)
install.packages(c("ggplot2", "ape", "ggmsa", "phylotools","phytools", "seqinr", "ips", "seqRFLP","lubridate", "treedater"))
install.packages(c("ggplot2", "ape", "ggmsa", "phylotools","phytools", "seqinr", "ips", "seqRFLP","lubridate", "treedater"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c('Biostrings', 'annotate', 'muscle', 'treeio', 'ggtree'))
# Load in the functions
setwd("~/Documents/GitHub/los_review/code/")
source("comb_dist_funcs.R")
source("comb_dist_data.R")
# interquatile range. Can change to something else but have to do equivalent in qunatiles
iqr <- c(0.25,0.5,0.75)
sample_size <- 100000
set.seed(643)
#printed values describe error in fit. Ideally less than 0.001
general_samples_china <- create_dist_weibull_discrete(los_general_china,
sizes,
sample_size = sample_size,
init_values = c(3,27))
# store the samples
all_samples_general_china <- general_samples_china[[1]]
# store the weibul parameters
fitted_pars_china <- general_samples_china[[2]]
#caluclate the new quanitles
quantile(all_samples_general_china, probs=c(0.25,0.5,0.75))
general_hist_china <-hist(all_samples_general_china, breaks=40)
general_samples_world <- create_dist_weibull_discrete(los_general_world,
sizes,
sample_size = sample_size,
init_values = c(3,27))
# store the samples
all_samples_general_world <- general_samples_world[[1]]
# store the weibul parameters
fitted_pars_world <- general_samples_world[[2]]
#caluclate the new quanitles
quantile(all_samples_general_world, probs=c(0.25,0.5,0.75))
general_hist_world <- hist(all_samples_general_world, breaks=40)
#printed values describe error in fit. Ideally less than 0.001
colnames(los_icu) <- c("N", "LOS_med", "LOS_q25", "LOS_q75", "LOS_mean", "LOS_sd")
colnames(los_icu_china) <- c("N", "LOS_med", "LOS_q25", "LOS_q75", "LOS_mean", "LOS_sd")
colnames(los_icu_world) <- c("N", "LOS_med", "LOS_q25", "LOS_q75", "LOS_mean", "LOS_sd")
icu_samples_china <- create_dist_weibull_discrete(los_icu_china,
sizes,
sample_size = sample_size,
init_values = c(3,27))
# store the samples
all_samples_icu_china  <- icu_samples_china [[1]]
# store the weibul parameters
fitted_pars_china  <- icu_samples_china [[2]]
#caluclate the new quanitles
quantile(all_samples_icu_china , probs=c(0.25,0.5,0.75))
icu_hist_china <-hist(all_samples_icu_china , breaks=20)
icu_samples_world <- create_dist_weibull_discrete(los_icu_world,
sizes,
sample_size = sample_size,
init_values = c(3,27))
# store the samples
all_samples_icu_world  <- icu_samples_world [[1]]
# store the weibul parameters
fitted_pars_world  <- icu_samples_world [[2]]
#caluclate the new quanitles
quantile(all_samples_icu_world , probs=c(0.25,0.5,0.75))
icu_hist_world<-hist(all_samples_icu_world , breaks=20)
HIST_PLOT <- plot_hist(icu_china = all_samples_icu_china,
icu_world = all_samples_icu_world,
general_china = all_samples_general_china,
general_world = all_samples_general_world)
pdf("histograms.pdf")
HIST_PLOT
dev.off()
quants_china_general <- quantile(all_samples_general_china,
probs=iqr)
quants_china_icu <- quantile(all_samples_icu_china,
probs=iqr)
quants_world_general <- quantile(all_samples_general_world,
probs=iqr)
quants_world_icu <- quantile(all_samples_icu_world,
probs=iqr)
HIST_PLOT
plot_hist <- function(icu_china, icu_world, general_china, general_world){
icu_china <- data.frame(samples =icu_china, location = "China", type = "ICU")
icu_world <- data.frame(samples =icu_world, location = "Rest of World", type = "ICU")
general_china <- data.frame(samples =general_china, location = "China", type = "General")
general_world <- data.frame(samples =general_world, location = "Rest of World", type = "General")
all_samples <- rbind(icu_china, icu_world, general_china, general_world)
browser()
all_samples %>%
group_by(c(location,type))
summarize(z=median(count()))
HIST_PLOT <- ggplot(all_samples, aes(x=samples, fill = location)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts")
return(HIST_PLOT)
}
HIST_PLOT <- plot_hist(icu_china = all_samples_icu_china,
icu_world = all_samples_icu_world,
general_china = all_samples_general_china,
general_world = all_samples_general_world)
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
HIST_PLOT <- plot_hist(icu_china = all_samples_icu_china,
icu_world = all_samples_icu_world,
general_china = all_samples_general_china,
general_world = all_samples_general_world)
vline_data <- all_samples %>%
group_by(c(location,type))
all_samples %>%
group_by(location)
all_samples %>%
group_by(location)
summarize(z=median(count()))
all_samples %>%
group_by(location)
summarize(z=median(samples)
z
vline_data <- all_samples %>%
group_by(location)
summarize(z=median(samples)
vline_data
vline_data <- all_samples %>%
group_by(location) %>%
summarize(z=median(samples)
HIST_PLOT <- ggplot(all_samples, aes(x=samples, fill = location)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts")
return(HIST_PLOT)
}
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
HIST_PLOT <- plot_hist(icu_china = all_samples_icu_china,
icu_world = all_samples_icu_world,
general_china = all_samples_general_china,
general_world = all_samples_general_world)
vline_data <- all_samples %>%
group_by(location) %>%
summarize(z=median(samples))
vline_data
vline_data <- all_samples %>%
group_by(location,type) %>%
summarize(z=median(samples))
vline_data
quants_china_general
quants_china_icu
quants_world_general
quants_world_icu
HIST_PLOT <- ggplot(all_samples, aes(x=samples, fill = location)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts") +
geom_vline(aes(xintercept = z), vline.data, colour = "red")
HIST_PLOT <- ggplot(all_samples, aes(x=samples, fill = location)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts") +
geom_vline(aes(xintercept = z), vline.data, colour = "black")
vline_data <- all_samples %>%
group_by(location,type) %>%
summarize(z=median(samples))
HIST_PLOT <- ggplot(all_samples, aes(x=samples, fill = location)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts") +
geom_vline(aes(xintercept = z), vline.data, colour = "black")
HIST_PLOT <- ggplot(all_samples, aes(x=samples, fill = location)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts") +
geom_vline(aes(xintercept = z), vline_data, colour = "black")
HIST_PLOT
HIST_PLOT <- ggplot(all_samples, aes(x=samples, fill = location)) +
geom_histogram(bins=61)+
facet_grid(location~type) + theme_bw() +
scale_x_continuous(breaks = seq(0, 60, by = 5), limits=c(0,60)) +
labs(x ="Length of Stay (days)", y="Counts") +
geom_vline(aes(xintercept = z), vline_data, colour = "black", linetype= "dashed")
HIST_PLOT
quants_china_general
quants_china_icu
quants_world_icu
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
source('~/Documents/GitHub/los_review/code/comb_dist_funcs.R')
quants_world_general
source('~/Documents/GitHub/los_review/code/comb_dists.R')
